


//FIXME: **** Services ****
1. AppLogic
2. Auth
    2.1 Path: /auth/
3. Storage
4. ZooKeeper
5. Database


//TODO: ---- Unsorted ----

1. Tokens instead of Cookies --> Stateless
    1.1 Server secrets reside in Zookeeper
    1.2 Or they all request authentication from applogic or auth service
2. Generate dummy database entries with mixer

//TODO: ---- Database ----

1. Create Postgress DB
2. SQLAlchemy - flask_sqlalchemy
3. Flask integration
    3.1 GET
        {
            /auth/register
            /auth/user
            /auth/user/<username>

            /user χωρις auth server
            @route db.com/user
            get(user) { SQL ... return json}
            get(
        }
    3.2 POST
        {
            create()
            {
                id : "UUID ? "
                username : "babis"
                password : "stokas"
                galleries : "url? name? id?"
                friends : "name1 , name2 , name3"
            }
        }


//TODO: ----  App Logic ----

1. Functions:
    1.1


// ------ APP LIFECYCLE

    1. INDEX    disastergram.com/
          or    disastergram.com/index (port 80)

        - Index is here. First public page
        - 1.1 GET disastergram.com
        - 1.2 --> APP WebServer @app.route('/')
            1.2.1 checks if already logged in => do we have token? cookie check if valid..
        - 1.3 --> RETURNS .html


    2. AUTH - summon @vsam's holy spirit

        disastergram.com/auth/register
        disastergram.com/api/auth/register

        reverse proxy - deployment

        @vsam
            Web σελίδα στον auth server???
            Αν ειναι ξεχωριστά θελουν και ξεχωριστά db?
            Αν η ιδέα ειναι να είναι αυτόνομο πρεπεί να εισαι μεσα στο zookeeper το auth?
            Πρεπει να ρωτάμε καθε φορά που κανουμε verify τον χρήστη?
            Maybe auth sends the token to Zookeper?

    3. /user - "profile" assume logged in user
        - 3.1 GET disastergram.com/api/user/<username>
        - 3.2 --> APP WebServer responds @app.route('/user/<username>')


        => gets users info, friends, galleries
    4. /gal

auth -> zookeeper -> deployment -> documentation


//TODO:  ---- Storage ----

1. how to handle file uploads!! example
2. Also downloads q.q (HTTP)

//TODO: ---- Front End // Templates/Views ----

0.1 I'll take frontend frameworks for 500. What is Jinja? What is React?

1. Index
2. Login
3. Profile (Galleries)


flask db init
flask db migrate -m "users table"